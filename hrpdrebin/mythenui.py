# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mythen.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from qtpy import QtCore, QtGui, QtWidgets

from .customui import DropListView

class Ui_mythen_gui(object):
    def setupUi(self, mythen_gui):
        mythen_gui.setObjectName("mythen_gui")
        mythen_gui.resize(800, 452)
        self.centralwidget = QtWidgets.QWidget(mythen_gui)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.scan_group = QtWidgets.QGroupBox(self.centralwidget)
        self.scan_group.setObjectName("scan_group")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.scan_group)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.delete_selection = QtWidgets.QPushButton(self.scan_group)
        self.delete_selection.setObjectName("delete_selection")
        self.gridLayout_4.addWidget(self.delete_selection, 1, 1, 1, 1)
        self.add_scans = QtWidgets.QPushButton(self.scan_group)
        self.add_scans.setObjectName("add_scans")
        self.gridLayout_4.addWidget(self.add_scans, 1, 0, 1, 1)
        self.scans_view = DropListView(self.scan_group)
        self.scans_view.setDragDropMode(QtWidgets.QAbstractItemView.DropOnly)
        self.scans_view.setDefaultDropAction(QtCore.Qt.CopyAction)
        self.scans_view.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
        self.scans_view.setObjectName("scans_view")
        self.gridLayout_4.addWidget(self.scans_view, 0, 0, 1, 2)
        self.horizontalLayout.addWidget(self.scan_group)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.dls_group = QtWidgets.QGroupBox(self.centralwidget)
        self.dls_group.setObjectName("dls_group")
        self.gridLayout = QtWidgets.QGridLayout(self.dls_group)
        self.gridLayout.setObjectName("gridLayout")
        self.label_3 = QtWidgets.QLabel(self.dls_group)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 1, 0, 1, 1)
        self.visit_edit = QtWidgets.QTextEdit(self.dls_group)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.visit_edit.sizePolicy().hasHeightForWidth())
        self.visit_edit.setSizePolicy(sizePolicy)
        self.visit_edit.setMinimumSize(QtCore.QSize(0, 0))
        self.visit_edit.setMaximumSize(QtCore.QSize(16777215, 24))
        self.visit_edit.setSizeIncrement(QtCore.QSize(0, 0))
        self.visit_edit.setAcceptRichText(False)
        self.visit_edit.setObjectName("visit_edit")
        self.gridLayout.addWidget(self.visit_edit, 1, 1, 1, 1)
        self.year_combo = QtWidgets.QComboBox(self.dls_group)
        self.year_combo.setObjectName("year_combo")
        self.year_combo.addItem("")
        self.gridLayout.addWidget(self.year_combo, 2, 1, 1, 1)
        self.add_scan_numbers = QtWidgets.QPushButton(self.dls_group)
        self.add_scan_numbers.setMinimumSize(QtCore.QSize(120, 0))
        self.add_scan_numbers.setObjectName("add_scan_numbers")
        self.gridLayout.addWidget(self.add_scan_numbers, 4, 0, 1, 2, QtCore.Qt.AlignHCenter)
        self.label_4 = QtWidgets.QLabel(self.dls_group)
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 2, 0, 1, 1)
        self.verticalLayout_2.addWidget(self.dls_group)
        self.parameter_group = QtWidgets.QGroupBox(self.centralwidget)
        self.parameter_group.setObjectName("parameter_group")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.parameter_group)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label_2 = QtWidgets.QLabel(self.parameter_group)
        self.label_2.setObjectName("label_2")
        self.gridLayout_2.addWidget(self.label_2, 3, 0, 1, 1)
        self.label = QtWidgets.QLabel(self.parameter_group)
        self.label.setObjectName("label")
        self.gridLayout_2.addWidget(self.label, 1, 0, 1, 1)
        self.angle_spinbox = QtWidgets.QDoubleSpinBox(self.parameter_group)
        self.angle_spinbox.setDecimals(3)
        self.angle_spinbox.setMaximum(180.0)
        self.angle_spinbox.setObjectName("angle_spinbox")
        self.gridLayout_2.addWidget(self.angle_spinbox, 1, 1, 1, 1)
        self.delta_spinbox = QtWidgets.QDoubleSpinBox(self.parameter_group)
        self.delta_spinbox.setDecimals(3)
        self.delta_spinbox.setMaximum(1.0)
        self.delta_spinbox.setSingleStep(0.001)
        self.delta_spinbox.setProperty("value", 0.001)
        self.delta_spinbox.setObjectName("delta_spinbox")
        self.gridLayout_2.addWidget(self.delta_spinbox, 3, 1, 1, 1)
        self.verticalLayout_2.addWidget(self.parameter_group)
        self.output_group = QtWidgets.QGroupBox(self.centralwidget)
        self.output_group.setObjectName("output_group")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.output_group)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.weight_cb = QtWidgets.QCheckBox(self.output_group)
        self.weight_cb.setObjectName("weight_cb")
        self.gridLayout_3.addWidget(self.weight_cb, 0, 1, 1, 1)
        self.process = QtWidgets.QPushButton(self.output_group)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.process.sizePolicy().hasHeightForWidth())
        self.process.setSizePolicy(sizePolicy)
        self.process.setObjectName("process")
        self.gridLayout_3.addWidget(self.process, 1, 1, 3, 1)
        self.rebin_rb = QtWidgets.QRadioButton(self.output_group)
        self.rebin_rb.setObjectName("rebin_rb")
        self.gridLayout_3.addWidget(self.rebin_rb, 1, 0, 1, 1)
        self.sum_rb = QtWidgets.QRadioButton(self.output_group)
        self.sum_rb.setObjectName("sum_rb")
        self.gridLayout_3.addWidget(self.sum_rb, 2, 0, 1, 1)
        self.both_rb = QtWidgets.QRadioButton(self.output_group)
        self.both_rb.setChecked(True)
        self.both_rb.setObjectName("both_rb")
        self.gridLayout_3.addWidget(self.both_rb, 3, 0, 1, 1)
        self.verticalLayout_2.addWidget(self.output_group)
        self.horizontalLayout.addLayout(self.verticalLayout_2)
        mythen_gui.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(mythen_gui)
        self.statusbar.setObjectName("statusbar")
        mythen_gui.setStatusBar(self.statusbar)

        self.retranslateUi(mythen_gui)
        QtCore.QMetaObject.connectSlotsByName(mythen_gui)

    def retranslateUi(self, mythen_gui):
        _translate = QtCore.QCoreApplication.translate
        mythen_gui.setWindowTitle(_translate("mythen_gui", "Mac/Mythen Rebinner"))
        self.scan_group.setTitle(_translate("mythen_gui", "Scan files"))
        self.delete_selection.setToolTip(_translate("mythen_gui", "<html><head/><body><p>Delete selected files from list</p></body></html>"))
        self.delete_selection.setText(_translate("mythen_gui", "Delete"))
        self.add_scans.setToolTip(_translate("mythen_gui", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Cantarell\'; font-size:11pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Sans Serif\'; font-size:9pt;\">Add scan files to list from file selector</span></p></body></html>"))
        self.add_scans.setText(_translate("mythen_gui", "Add files..."))
        self.scans_view.setToolTip(_translate("mythen_gui", "List of scan files"))
        self.dls_group.setToolTip(_translate("mythen_gui", "<html><head/><body><p>Diamond Light Source specific information</p></body></html>"))
        self.dls_group.setTitle(_translate("mythen_gui", "DLS info"))
        self.label_3.setText(_translate("mythen_gui", "Visit ID"))
        self.visit_edit.setToolTip(_translate("mythen_gui", "<html><head/><body><p>A visit ID is a combination of two letters (village), four numbers (proposal) followed by a dash and a visit number in a year (eg. &quot;cm1234-2&quot;). Leave empty for all visits</p></body></html>"))
        self.year_combo.setToolTip(_translate("mythen_gui", "<html><head/><body><p>Year of visit</p></body></html>"))
        self.year_combo.setItemText(0, _translate("mythen_gui", "All years"))
        self.add_scan_numbers.setToolTip(_translate("mythen_gui", "<html><head/><body><p>Add to list of scan files using given scan numbers and visit information</p></body></html>"))
        self.add_scan_numbers.setText(_translate("mythen_gui", "Add scans..."))
        self.label_4.setText(_translate("mythen_gui", "Year"))
        self.parameter_group.setToolTip(_translate("mythen_gui", "<html><head/><body><p>Count data is rebinned into larger angle bins specified by the leading edge value (start) and the width (size) in units of degrees</p></body></html>"))
        self.parameter_group.setTitle(_translate("mythen_gui", "Bin angle parameters (degrees)"))
        self.label_2.setText(_translate("mythen_gui", "Size"))
        self.label.setText(_translate("mythen_gui", "Start"))
        self.output_group.setTitle(_translate("mythen_gui", "Output"))
        self.weight_cb.setToolTip(_translate("mythen_gui", "Include weight (number of bins used) as 4th column of output"))
        self.weight_cb.setText(_translate("mythen_gui", "include weight"))
        self.process.setToolTip(_translate("mythen_gui", "<html><head/><body><p>Rebin the count data from the given scan files according to the bin parameters set and save as indicted using chosen directory and summarise in chosen filename</p></body></html>"))
        self.process.setText(_translate("mythen_gui", "Process\n"
"and\n"
"save..."))
        self.rebin_rb.setText(_translate("mythen_gui", "Rebin only"))
        self.sum_rb.setText(_translate("mythen_gui", "Sum only"))
        self.both_rb.setText(_translate("mythen_gui", "Both"))

